#!/bin/sh --editor-syntax-highlighting-only
#
#  functions for tlp-pcilist, tlp-usblist
#
#  Each devlist program $prog is usually split up into 3 functions:
#
#  * tlp_$prog__<command>() executes <command> and preparses the output
#  * tlp_$prog_process_dev() processes a single device (/output line)
#  * tlp_$prog() is the program's main function
#     It is mostly glue code but may contain initialization etc.
#

# ----------------------------------------------------------------------------
# Constants

readonly TLP_DEVLIST_IFS_DEFAULT="${IFS}"
readonly TLP_DEVLIST_IFS_NEWLINE="
"

readonly LSPCI=lspci
readonly LSUSB=lsusb


# ----------------------------------------------------------------------------
# Functions

# --- common functions, tlp_devlist*()
tlp_devlist_read_sysfs_file() {
    { read -r ${1} < "${2}"; } 2>/dev/null || eval "${1}="
}

tlp_devlist_add_sbin_to_PATH() {
    # could use add_sbin2path from tlp-functions instead
    local sp

    for sp in /usr/sbin /sbin; do
        case ":${PATH-}:" in
            *":${sp}:"*)
                true
            ;;
            *)
                export PATH="${PATH:+${PATH}:}${sp}"
            ;;
        esac
    done
}

tlp_devlist_read_sysfs_attr() {
    attr_val=
    attr_name=

    local attr_root
    attr_root="${1:?}"; shift

    for attr_name; do
        if tlp_devlist_read_sysfs_file attr_val "${attr_root}/${1}"; then
            return 0
        fi
    done

    return 1
}


# --- pcilist functions, tlp_pcilist*()
tlp_pcilist_process_dev() { # $1: dev, remainder ($2..): classdesc
    [ -n "${1-}" ] || return 1

    local dev classdesc devp devc pmode class

    dev="${1}"; shift
    classdesc="${*:-<unknown>}"

    devp="/sys/bus/pci/devices/0000:${dev}"
    devc="${devp}/power/control"

    if tlp_devlist_read_sysfs_file class "${devp}/class"; then
        # $devp not valid if no class attribute present
        tlp_devlist_read_sysfs_file pmode "${devc}"

        printf "%s = %-4s (%s %s)\n" \
            "${devc}" "${pmode:-???}" "${class}" "${classdesc}"
    else
        return 2
    fi
}

tlp_pcilist__lspci() {
    tlp_devlist_add_sbin_to_PATH 1>/dev/null 2>/dev/null

    ${LSPCI:?} -mm | sed -r -e 's|^(\S+)\s+\"([^\"]+)\".*$|\1 \2|'
}

tlp_pcilist() { # no args accepted
    # lspci + sed
    #  alternatively, use lspci and "eval set -- ${lspci_output_line}"
    #  the sed variant is safer and turns out to be slightly faster
    #   (10^-3 sec range for 1k iterations)
    #
    local IFS="${TLP_DEVLIST_IFS_NEWLINE?}"
    set -- $(tlp_pcilist__lspci)
    IFS="${TLP_DEVLIST_IFS_DEFAULT?}"

    while [ $# -gt 0 ]; do
        tlp_pcilist_process_dev ${1}
        shift
    done
}

# --- usblist functions, tlp_usblist*()
tlp_usblist_get_driverlist() { # $1: usbdev sysfs path
    driverlist=
    local subdev udev driver iter driver_in_list
    usbdev="${1}"

    set --
    for subdev in "${usbdev}/"*":"*; do
        driver="$(readlink -- "${subdev}/driver" 2>/dev/null)"

        if [ $? -eq 0 ] && [ -n "${driver}" ]; then
            driver="${driver##*/},"
            driver_in_list=false

            for iter; do
                if [ "${iter}" = "${driver}" ]; then
                    driver_in_list=true
                    break
                fi
            done

            ${driver_in_list} || set -- "$@" "${driver}"
        fi
    done

    driverlist="${*%,}"
    : ${driverlist:="no driver"}
}

tlp_usblist_process_dev() { # $1: bus, $2: dev, $3: usbid, remainder: desc
    local busnum devnum usbid desc usbk usbdev asf asv cnf cnv driverlist
    local asv_fmt_len
    local attr_name attr_val

    local outformat #REMOVING

    [ -n "${1-}" ] && [ -n "${2-}" ] && [ -n "${3-}" ] || return 1

    busnum="${1}"
    devnum="${2}"
    usbid="${3}"
    shift 3 || return
    desc="${*:-<unknown>}"

    usbk="${busnum}_${devnum}"

    eval "usbdev=\"\${__tlp_usbk_${usbk}-}\""
    [ -n "${usbdev}" ] || return


    tlp_devlist_read_sysfs_attr \
        "${usbdev}/power" control level || return 4

    cnf="${attr_name}"
    cnv="${attr_val}"


    tlp_devlist_read_sysfs_attr \
        "${usbdev}/power" autosuspend_delay_ms autosuspend || return 5

    asf="${attr_name}"
    asv="${attr_val}"

    if [ "${asf}" = "autosuspend_delay_ms" ]; then
        asv_fmt_len=5
    else
        asv_fmt_len=2
    fi


    tlp_usblist_get_driverlist "${usbdev}"

    printf \
        "Bus %s Device %s ID %s %s = %-5s %s = %${asv_fmt_len}d -- %s (%s)\n" \
        \
        "${busnum}" \
        "${devnum}" \
        "${usbid}" \
        "${cnf}" \
        "${cnv}," \
        "${asf}" \
        "${asv}" \
        "${desc}" \
        "${driverlist}"

}

tlp_usblist__lsusb() {
    tlp_devlist_add_sbin_to_PATH 1>/dev/null 2>/dev/null

    ${LSUSB:?} | sed -r -e \
's|^Bus\s([0-9]{3})\sDevice\s([0-9]{3})[:]\sID\s([0-9A-Fa-f]{4}[:][0-9A-Fa-f]{4})(\s.*)?$|\1 \2 \3\4|'
}

tlp_usblist() {
    local usbdev busnum devnum usbk

    # create a %busnum_%devnum => sysfs path mapping
    #  in contrast to the original perl script, only sysfs paths get hashed
    #  autosuspend_delay_ms et al get read when processing lsusb output
    for usbdev in /sys/bus/usb/devices/?*; do
        case "${usbdev}" in
            *:*)
                true
            ;;
            *)
                # printf -v VAR FMT ARG... would be a bashism,
                #   using VAR="$(printf FMT ARG...)" instead
                if {
                    read -r busnum < "${usbdev}/busnum" && \
                    read -r devnum < "${usbdev}/devnum" && \
                    usbk="$(printf "%03d_%03d" "${busnum}" "${devnum}")" && \
                    [ -n "${usbk}" ]
                } 2>/dev/null; then
                    eval "local __tlp_usbk_${usbk}=\"${usbdev}\""
                fi
            ;;
        esac
    done

    local IFS="${TLP_DEVLIST_IFS_NEWLINE?}"
    set -- $(tlp_usblist__lsusb)
    IFS="${TLP_DEVLIST_IFS_DEFAULT?}"

    while [ $# -gt 0 ]; do
        tlp_usblist_process_dev ${1}
        shift
    done
}
