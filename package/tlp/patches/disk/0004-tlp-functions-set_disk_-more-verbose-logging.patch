From 3b257ffcc010a28ada2392b9e7626b6a570606c5 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Andr=C3=A9=20Erdmann?= <dywi@mailerd.de>
Date: Mon, 25 Aug 2014 23:12:56 +0200
Subject: [PATCH 4/6] tlp-functions, set_disk_*(): more verbose logging

log about missing disks etc.
---
 tlp-functions | 55 +++++++++++++++++++++++++++++++------------------------
 1 file changed, 31 insertions(+), 24 deletions(-)

diff --git a/tlp-functions b/tlp-functions
index 16006d0..7609f28 100755
--- a/tlp-functions
+++ b/tlp-functions
@@ -651,7 +651,7 @@ get_disk_dev () { # translate disk id to device (sdX)
 set_disk_apm_level () { # set disk apm level
     # $1: 0=ac mode, 1=battery mode
 
-    local dev _pwrmode
+    local dev log_message _pwrmode
     _pwrmode="$1"
 
     : ${DISK_DEVICES:=${DEFAULT_DISK_DEVICES}}
@@ -670,13 +670,15 @@ set_disk_apm_level () { # set disk apm level
     for dev in $DISK_DEVICES; do
         : ${1:?BUG: broken apmlist handling}
         get_disk_dev $dev
+        log_message="set_disk_apm_level(${_pwrmode}): $disk_dev [$disk_id] $1"
 
-        if [ -b /dev/$disk_dev ]; then
-            if check_disk_hdparm_cap $disk_dev; then
-                echo_debug "pm" "set_disk_apm_level(${_pwrmode}): $disk_dev [$disk_id] $1"
-                $HDPARM -B $1 /dev/$disk_dev > /dev/null 2>&1
-
-            fi
+        if [ ! -b /dev/$disk_dev ]; then
+            echo_debug "pm" "${log_message} -- missing"
+        elif ! check_disk_hdparm_cap $disk_dev; then
+            echo_debug "pm" "${log_message} -- not supported"
+        else
+            echo_debug "pm" "${log_message}"
+            $HDPARM -B $1 /dev/$disk_dev > /dev/null 2>&1
         fi
 
         # last entry in apmlist applies to all remaining disks
@@ -689,7 +691,7 @@ set_disk_apm_level () { # set disk apm level
 set_disk_spindown_timeout () { # set disk spindown timeout
     # $1: 0=ac mode, 1=battery mode
 
-    local dev _pwrmode
+    local dev log_message _pwrmode
     _pwrmode="$1"
 
     : ${DISK_DEVICES:=${DEFAULT_DISK_DEVICES}}
@@ -708,12 +710,15 @@ set_disk_spindown_timeout () { # set disk spindown timeout
     for dev in $DISK_DEVICES; do
         : ${1:?BUG: broken spindown timeout list handling}
         get_disk_dev $dev
+        log_message="set_disk_spindown_timeout(${_pwrmode}): $disk_dev [$disk_id] $1"
 
-        if [ -b /dev/$disk_dev ]; then
-            if check_disk_hdparm_cap $disk_dev; then
-                echo_debug "pm" "set_disk_spindown_timeout(${_pwrmode}): $disk_dev [$disk_id] $1"
-                $HDPARM -S $1 /dev/$disk_dev > /dev/null 2>&1
-            fi
+        if [ ! -b /dev/$disk_dev ]; then
+            echo_debug "pm" "${log_message} -- missing"
+        elif ! check_disk_hdparm_cap $disk_dev; then
+            echo_debug "pm" "${log_message} -- not supported"
+        else
+            echo_debug "pm" "${log_message}"
+            $HDPARM -S $1 /dev/$disk_dev > /dev/null 2>&1
         fi
 
         # last entry in timeoutlist applies to all remaining disks
@@ -724,7 +729,7 @@ set_disk_spindown_timeout () { # set disk spindown timeout
 }
 
 set_disk_io_sched () { # set disk io scheduler
-    local dev sched schedctrl
+    local dev sched schedctrl log_message
 
     : ${DISK_DEVICES:=${DEFAULT_DISK_DEVICES}}
     # set @argv := schedlist
@@ -738,16 +743,18 @@ set_disk_io_sched () { # set disk io scheduler
     #
     for dev in $DISK_DEVICES; do
         get_disk_dev $dev
-
-        if [ -b /dev/$disk_dev ]; then
-            # parse list, add cfq as default when list is too short
-            sched=${1:-cfq}
-            schedctrl="/sys/block/$disk_dev/queue/scheduler"
-
-            if [ -f $schedctrl ]; then
-                echo_debug "pm" "set_disk_io_sched: $disk_dev [$disk_id] $sched"
-                echo -n $sched > $schedctrl
-            fi
+        # get sched from argv, add cfq as default when list is too short
+        sched=${1:-cfq}
+        schedctrl="/sys/block/$disk_dev/queue/scheduler"
+        log_message="set_disk_io_sched: $disk_dev [$disk_id] $sched"
+
+        if [ ! -b /dev/$disk_dev ]; then
+            echo_debug "pm" "${log_message} -- missing"
+        elif [ ! -f $schedctrl ]; then
+            echo_debug "pm" "${log_message} -- not supported"
+        else
+            echo_debug "pm" "${log_message}"
+            echo -n $sched > $schedctrl
         fi
 
         # using %DEFAULT_DISK_IO_SCHEDULER when argv is empty
-- 
2.0.4

