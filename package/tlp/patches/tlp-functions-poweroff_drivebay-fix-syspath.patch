From 475b6814abdc9ea95e201c224371c3ee4f14ebc0 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Andr=C3=A9=20Erdmann?= <dywi@mailerd.de>
Date: Tue, 9 Sep 2014 22:45:31 +0200
Subject: [PATCH] tlp-functions, poweroff_drivebay(): fix $syspath

Prior to this patch, poweroff_drivebay() did the following:

>> syspath="/sys$($UDEVADM info ... | perl -pe 's!/block/...$!!')"
>> ...
>> [ -n "$syspath" ] && echo 1 > $syspath/delete

This leads to two issues:

(1) $syspath is never empty ("/sys"), so the -n check always succeeds
    Unlikely case, because the function checks for existence of the
    optical drive, but it could end up trying to write /sys/delete
    if udevadm fails for whatever reason.

(2) the perl regex assumes that the name of $optdrv ($BAY_DEVICE)
    is exactly 3 chars long, else the path returned from udevadm is left
    unchanged -- e.g. if BAY_DEVICE is set to "sr10".
    Again, unlikely case.

The 'obvious' solution for issue (a) is:

>> [ -n "${syspath#/sys}" ]

and for (b):

>> syspath="/sys$($UDEVADM info ... | perl -pe 's!/block/[^/]*[^/]$!!')"

(drop /block/<name>, and <name> must not contain "/" chars)

This commit, however, proposes a different solution:

* check for udevadm's return code and don't touch $syspath/delete if it fails

* use shell builtins instead of the perl command
   In constrast to the (changed) regex, it _will_ remove subpaths at the end of
   the syspath str (".../block/a/b" => "...").
   Alternatively, "sed -e" would be identical to "perl -pe" here.

This removes the dependency on perl from tlp-functions,
which means that, under certain circumstances (i.e. no tpacpi-bat needed),
tlp (but not tlp-stat) _could_ be run without perl.
---
 tlp-functions | 15 ++++++++++++---
 1 file changed, 12 insertions(+), 3 deletions(-)

diff --git a/tlp-functions b/tlp-functions
index f3ee700..c4a89f0 100755
--- a/tlp-functions
+++ b/tlp-functions
@@ -2090,9 +2090,18 @@ poweroff_drivebay () { # power off optical drive in drive bay
             sleep 1
 
             # Unregister scsi device
-            syspath="/sys$($UDEVADM info --query=path --name=$optdrv | perl -pe 's!/block/...$!!')"
-            echo_debug "pm" "poweroff_drivebay: syspath=$syspath"
-            [ -n "$syspath" ] && echo 1 > $syspath/delete
+            if syspath="$($UDEVADM info --query=path --name=$optdrv)"; then
+                syspath="/sys${syspath%/block/*}"
+
+                if [ "$syspath" != "/sys" ]; then
+                    echo_debug "pm" "poweroff_drivebay: syspath=$syspath"
+                    echo 1 > $syspath/delete
+                else
+                    echo_debug "pm" "poweroff_drivebay: got empty/invalid syspath for $optdrv"
+                fi
+            else
+                echo_debug "pm" "poweroff_drivebay: failed to get syspath (udevadm returned $?)"
+            fi
 
             # Turn power off
             echo 1 > $dock/undock
-- 
2.1.0

