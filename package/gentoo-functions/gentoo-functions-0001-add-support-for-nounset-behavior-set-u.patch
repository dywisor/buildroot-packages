diff --git a/functions.sh b/functions.sh
index 3ea9daa..707f8f4 100644
--- a/functions.sh
+++ b/functions.sh
@@ -15,7 +15,7 @@ RC_GOT_FUNCTIONS="yes"
 #
 _esetdent()
 {
-	local i="$1"
+	local i="${1-}"
 	[ -z "$i" ] || [ "$i" -lt 0 ] && i=0
 	RC_INDENTATION=$(printf "%${i}s" '')
 }
@@ -25,8 +25,9 @@ _esetdent()
 #
 eindent()
 {
-	local i="$1"
+	local i="${1-}"
 	[ -n "$i" ] && [ "$i" -gt 0 ] || i=$RC_DEFAULT_INDENT
+	: "${RC_INDENTATION=}"
 	_esetdent $(( ${#RC_INDENTATION} + i ))
 }
 
@@ -35,8 +36,9 @@ eindent()
 #
 eoutdent()
 {
-	local i="$1"
+	local i="${1-}"
 	[ -n "$i" ] && [ "$i" -gt 0 ] || i=$RC_DEFAULT_INDENT
+	: "${RC_INDENTATION=}"
 	_esetdent $(( ${#RC_INDENTATION} - i ))
 }
 
@@ -47,7 +49,7 @@ eoutdent()
 #
 yesno()
 {
-	[ -z "$1" ] && return 1
+	[ -z "${1-}" ] && return 1
 
 	case "$1" in
 		[Yy][Ee][Ss]|[Tt][Rr][Uu][Ee]|[Oo][Nn]|1) return 0;;
@@ -71,9 +73,9 @@ esyslog()
 	local pri=
 	local tag=
 
-	if [ -n "$EINFO_LOG" ] && command -v logger > /dev/null 2>&1; then
-		pri="$1"
-		tag="$2"
+	if [ -n "${EINFO_LOG-}" ] && command -v logger > /dev/null 2>&1; then
+		pri="${1-}"
+		tag="${2-}"
 
 		shift 2
 		[ -z "$*" ] && return 0
@@ -89,13 +91,13 @@ esyslog()
 #
 einfon()
 {
-	if yesno "${EINFO_QUIET}"; then
+	if yesno "${EINFO_QUIET-}"; then
 		return 0
 	fi
-	if ! yesno "${RC_ENDCOL}" && [ "${LAST_E_CMD}" = "ebegin" ]; then
+	if ! yesno "${RC_ENDCOL-}" && [ "${LAST_E_CMD-}" = "ebegin" ]; then
 		printf "\n"
 	fi
-	printf " ${GOOD}*${NORMAL} ${RC_INDENTATION}$*"
+	printf " ${GOOD-}*${NORMAL-} ${RC_INDENTATION-}$*"
 	LAST_E_CMD="einfon"
 	return 0
 }
@@ -115,13 +117,13 @@ einfo()
 #
 ewarnn()
 {
-	if yesno "${EINFO_QUIET}"; then
+	if yesno "${EINFO_QUIET-}"; then
 		return 0
 	else
-		if ! yesno "${RC_ENDCOL}" && [ "${LAST_E_CMD}" = "ebegin" ]; then
+		if ! yesno "${RC_ENDCOL-}" && [ "${LAST_E_CMD-}" = "ebegin" ]; then
 			printf "\n" >&2
 		fi
-		printf " ${WARN}*${NORMAL} ${RC_INDENTATION}$*" >&2
+		printf " ${WARN-}*${NORMAL-} ${RC_INDENTATION-}$*" >&2
 	fi
 
 	local name="${0##*/}"
@@ -137,13 +139,13 @@ ewarnn()
 #
 ewarn()
 {
-	if yesno "${EINFO_QUIET}"; then
+	if yesno "${EINFO_QUIET-}"; then
 		return 0
 	else
-		if ! yesno "${RC_ENDCOL}" && [ "${LAST_E_CMD}" = "ebegin" ]; then
+		if ! yesno "${RC_ENDCOL-}" && [ "${LAST_E_CMD-}" = "ebegin" ]; then
 			printf "\n" >&2
 		fi
-		printf " ${WARN}*${NORMAL} ${RC_INDENTATION}$*\n" >&2
+		printf " ${WARN-}*${NORMAL-} ${RC_INDENTATION-}$*\n" >&2
 	fi
 
 	local name="${0##*/}"
@@ -159,13 +161,13 @@ ewarn()
 #
 eerrorn()
 {
-	if yesno "${EERROR_QUIET}"; then
+	if yesno "${EERROR_QUIET-}"; then
 		return 1
 	else
-		if ! yesno "${RC_ENDCOL}" && [ "${LAST_E_CMD}" = "ebegin" ]; then
+		if ! yesno "${RC_ENDCOL-}" && [ "${LAST_E_CMD-}" = "ebegin" ]; then
 			printf "\n" >&2
 		fi
-		printf " ${BAD}*${NORMAL} ${RC_INDENTATION}$*" >&2
+		printf " ${BAD-}*${NORMAL-} ${RC_INDENTATION-}$*" >&2
 	fi
 
 	local name="${0##*/}"
@@ -181,13 +183,13 @@ eerrorn()
 #
 eerror()
 {
-	if yesno "${EERROR_QUIET}"; then
+	if yesno "${EERROR_QUIET-}"; then
 		return 1
 	else
-		if ! yesno "${RC_ENDCOL}" && [ "${LAST_E_CMD}" = "ebegin" ]; then
+		if ! yesno "${RC_ENDCOL-}" && [ "${LAST_E_CMD-}" = "ebegin" ]; then
 			printf "\n" >&2
 		fi
-		printf " ${BAD}*${NORMAL} ${RC_INDENTATION}$*\n" >&2
+		printf " ${BAD-}*${NORMAL-} ${RC_INDENTATION-}$*\n" >&2
 	fi
 
 	local name="${0##*/}"
@@ -204,16 +206,17 @@ eerror()
 ebegin()
 {
 	local msg="$*"
-	if yesno "${EINFO_QUIET}"; then
+	if yesno "${EINFO_QUIET-}"; then
 		return 0
 	fi
 
 	msg="${msg} ..."
 	einfon "${msg}"
-	if yesno "${RC_ENDCOL}"; then
+	if yesno "${RC_ENDCOL-}"; then
 		printf "\n"
 	fi
 
+	: "${RC_INDENTATION=}"
 	LAST_E_LEN="$(( 3 + ${#RC_INDENTATION} + ${#msg} ))"
 	LAST_E_CMD="ebegin"
 	return 0
@@ -232,8 +235,8 @@ _eend()
 	shift 2
 
 	if [ "${retval}" = "0" ]; then
-		yesno "${EINFO_QUIET}" && return 0
-		msg="${BRACKET}[ ${GOOD}ok${BRACKET} ]${NORMAL}"
+		yesno "${EINFO_QUIET-}" && return 0
+		msg="${BRACKET-}[ ${GOOD-}ok${BRACKET-} ]${NORMAL-}"
 	else
 		if [ -c /dev/null ] ; then
 			rc_splash "stop" >/dev/null 2>&1 &
@@ -243,13 +246,13 @@ _eend()
 		if [ -n "$*" ] ; then
 			${efunc} "$*"
 		fi
-		msg="${BRACKET}[ ${BAD}!!${BRACKET} ]${NORMAL}"
+		msg="${BRACKET-}[ ${BAD-}!!${BRACKET-} ]${NORMAL-}"
 	fi
 
-	if yesno "${RC_ENDCOL}"; then
+	if yesno "${RC_ENDCOL-}"; then
 		printf "${ENDCOL}  ${msg}\n"
 	else
-		[ "${LAST_E_CMD}" = ebegin ] || LAST_E_LEN=0
+		[ "${LAST_E_CMD-}" = ebegin ] || LAST_E_LEN=0
 		printf "%$(( COLS - LAST_E_LEN - 6 ))s%b\n" '' "${msg}"
 	fi
 
@@ -290,49 +293,49 @@ ewend()
 # The condition is negated so the return value will be zero.
 veinfo()
 {
-	yesno "${EINFO_VERBOSE}" && einfo "$@"
+	yesno "${EINFO_VERBOSE-}" && einfo "$@"
 }
 
 veinfon()
 {
-	yesno "${EINFO_VERBOSE}" && einfon "$@"
+	yesno "${EINFO_VERBOSE-}" && einfon "$@"
 }
 
 vewarn()
 {
-	yesno "${EINFO_VERBOSE}" && ewarn "$@"
+	yesno "${EINFO_VERBOSE-}" && ewarn "$@"
 }
 
 veerror()
 {
-	yesno "${EINFO_VERBOSE}" && eerror "$@"
+	yesno "${EINFO_VERBOSE-}" && eerror "$@"
 }
 
 vebegin()
 {
-	yesno "${EINFO_VERBOSE}" && ebegin "$@"
+	yesno "${EINFO_VERBOSE-}" && ebegin "$@"
 }
 
 veend()
 {
-	yesno "${EINFO_VERBOSE}" && { eend "$@"; return $?; }
+	yesno "${EINFO_VERBOSE-}" && { eend "$@"; return $?; }
 	return ${1:-0}
 }
 
 vewend()
 {
-	yesno "${EINFO_VERBOSE}" && { ewend "$@"; return $?; }
+	yesno "${EINFO_VERBOSE-}" && { ewend "$@"; return $?; }
 	return ${1:-0}
 }
 
 veindent()
 {
-	yesno "${EINFO_VERBOSE}" && eindent
+	yesno "${EINFO_VERBOSE-}" && eindent
 }
 
 veoutdent()
 {
-	yesno "${EINFO_VERBOSE}" && eoutdent
+	yesno "${EINFO_VERBOSE-}" && eoutdent
 }
 
 #
@@ -340,7 +343,7 @@ veoutdent()
 #
 get_libdir()
 {
-	if [ -n "${CONF_LIBDIR_OVERRIDE}" ] ; then
+	if [ -n "${CONF_LIBDIR_OVERRIDE-}" ] ; then
 		CONF_LIBDIR="${CONF_LIBDIR_OVERRIDE}"
 	elif command -v portageq > /dev/null 2>&1; then
 		CONF_LIBDIR="$(portageq envvar CONF_LIBDIR)"
@@ -371,7 +374,7 @@ get_bootparam()
 
 			# Parse gentoo option
 			for x in ${params} ; do
-				if [ "${x}" = "$1" ] ; then
+				if [ "${x}" = "${1-}" ] ; then
 #					echo "YES"
 					retval=0
 				fi
@@ -390,7 +393,7 @@ get_bootparam()
 is_older_than()
 {
 	local x=
-	local ref="$1"
+	local ref="${1-}"
 	[ $# -eq 0 ] || shift
 
 	for x in "$@" ; do
@@ -420,7 +423,7 @@ RC_DOT_PATTERN=''
 # Cache the CONSOLETYPE - this is important as backgrounded shells don't
 # have a TTY. rc unsets it at the end of running so it shouldn't hang
 # around
-if [ -z "${CONSOLETYPE}" ] ; then
+if [ -z "${CONSOLETYPE-}" ] ; then
 	CONSOLETYPE="$(consoletype stdout 2>/dev/null )"; export CONSOLETYPE
 fi
 if [ "${CONSOLETYPE}" = "serial" ] ; then
@@ -440,18 +443,18 @@ done
 # Setup COLS and ENDCOL so eend can line up the [ ok ]
 COLS="${COLUMNS:-0}"            # bash's internal COLUMNS variable
 [ "$COLS" -eq 0 ] && \
-        COLS="$(set -- $(stty size 2>/dev/null) ; printf "$2\n")"
+        COLS="$(set -- $(stty size 2>/dev/null) ; printf "${2-}\n")"
 [ -z "$COLS" ] && COLS=80
 [ "$COLS" -gt 0 ] || COLS=80	# width of [ ok ] == 7
 
-if yesno "${RC_ENDCOL}"; then
+if yesno "${RC_ENDCOL-}"; then
 	ENDCOL='\033[A\033['$(( COLS - 8 ))'C'
 else
 	ENDCOL=''
 fi
 
 # Setup the colors so our messages all look pretty
-if yesno "${RC_NOCOLOR}"; then
+if yesno "${RC_NOCOLOR-}"; then
 	unset GOOD WARN BAD NORMAL HILITE BRACKET
 elif (command -v tput && tput colors) >/dev/null 2>&1; then
 	GOOD="$(tput sgr0)$(tput bold)$(tput setaf 2)"
